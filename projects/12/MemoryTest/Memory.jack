// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array ram;
    static Array heap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
      let ram = 0;
      let heap = 2048; //heapBase

      let freeList = 2048;  // freelist - heap[freeList] is entry point to list.
      let heap[0] = 0;       // next freelist entry - 0 == end.
      let heap[1] = 14335;  // length of freelist entry

      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let ram[address] = value;
      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var int findBase;
      var int findSize;
      var int nextEntry;
      var int blockAddr;

      let findBase = 0;
      let findSize = heap[findBase + 1];
      let nextEntry = heap[findBase];
      while ((size < (findSize + 2)) & (~(nextEntry = 0))) {
          let findBase = nextEntry;
          let findSize = heap[findBase - 1];
          let nextEntry = heap[findBase];
      }
      if ( size < (findSize + 2)) {
        let blockAddr = findSize - (size + 2);
        let heap[findBase + 1] = blockAddr;
        // Set nextEntry to 0 (end of list)
        let heap[blockAddr] = 0;
        // set this block size
        let heap[blockAddr + 1] = size;
      } else {
        // negative 1 for fatal error... out of heap space.
        let blockAddr = -1;
      }
      return blockAddr;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {

      return;
    }
}
