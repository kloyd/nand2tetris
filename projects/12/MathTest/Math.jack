// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
      let twoToThe = Array.new(16);
      let twoToThe[0] = 1;
      let twoToThe[1] = 2;
      let twoToThe[2] = 4;
      let twoToThe[3] = 8;
      let twoToThe[4] = 16;
      let twoToThe[5] = 32;
      let twoToThe[6] = 64;
      let twoToThe[7] = 128;
      let twoToThe[8] = 256;
      let twoToThe[9] = 512;
      let twoToThe[10] = 1024;
      let twoToThe[11] = 2048;
      let twoToThe[12] = 4096;
      let twoToThe[13] = 8192;
      let twoToThe[14] = 16384;
      let twoToThe[15] = 16384 + 16384;

      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {
        return x * -1;
      } else {
        return x;
      }
    }

    /** Returns the value of the 'i'th bit of x */
    function boolean bit(int x, int i) {
      var int result;
      // And x with the bit power should return the bit power, otherwise zero.
      let result = x & twoToThe[i];
      if (result = 0) {
        return false;
      } else {
        return true;
      }

    }
    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int sum, shiftedX, j;
      let sum = 0;
      let shiftedX = x;
      let j = 0;
      while (j < 16) {
        if (Math.bit(y, j)) {
          let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX + shiftedX;
        let j = j + 1;
      }
      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int result;
      var int signx;
      var int signy;

      if (x < 0) {
        let signx = -1;
      } else {
        let signx = 1;
      }

      if (y < 0) {
        let signy = -1;
      } else {
        let signy = 1;
      }

      let result = Math.divide2(Math.abs(x), Math.abs(y));
      return result * signx * signy;
    }

    function int divide2(int x, int y) {
      var int q;
      var int xcomp;

      if ((y > x) | (y < 0)) {
        return 0;
      }
      let q = Math.divide2(x, 2 * y);
      let xcomp = x - (2 * q * y);
      // do Output.printString("xcomp ");
      // do Output.printInt(xcomp);
      // do Output.println();
      if (xcomp < y) {
        return q + q;
      } else {
        return q + q + 1;
      }

    }

    /*
    Compute integer part of y = sqrt(x)
    Find an integer such that y^2 <= x < (y + 1)^2 for 0 <= x < 2^n
    By performing binary search in the range 0...2^(n/2) - 1

    Square root of (x) strategy
    y = 0
    for j = n/2 -1 down to 0 do
      if (y + 2^j)^2 <= x then y = y + 2^j

    return y

    */

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int y;
      var int j;
      var int squared;
      let j = 8;
      let y = 0;
      while ( j > -1) {
        let squared = y + twoToThe[j];
        let squared = squared * squared;
        if (((squared < x) | (squared = x)) & (squared >0)) {
          let y = y + twoToThe[j];
        }
        let j = j - 1;
      }
      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if ( a > b ) {
        return a;
      } else {
        return b;
      }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if ( a < b ) {
        return a;
      } else {
        return b;
      }
    }
}
