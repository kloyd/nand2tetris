// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length;
    field int maxLen;
    field Array str;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      if (maxLength > 0) {
        let str = Memory.alloc(maxLength);
      }
      let maxLen = maxLength;
      let length = 0;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      if (maxLen > 0) {
        do Memory.deAlloc(str);
      }
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      var int checklen;
      let checklen = length - 1;
      if((j < 0) | (j > checklen)) {
        return 0;
      }
      return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      var int checklen;
      let checklen = length - 1;
      if ((j < 0) | (j > checklen)) {
        return;
      }
      let str[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      if (length < maxLen) {
        let str[length] = c;
        let length = length + 1;
      }
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      if (length > 0) {
        let str[length] = 0;
        let length = length - 1;
      }
      return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
      var int tempVal;
      var int counter;
      var boolean negativeNum;
      var int digit;
      let counter = 0;
      let tempVal = 0;
      // negativeSign
      if (str[0] = 45) {
        let negativeNum = true;
        let counter = counter + 1;
      } else {
        let negativeNum = false;
      }
      while (counter < length) {
        let digit = str[counter] - 48;
        if ((digit > -1) & (digit < 10)){
          let tempVal = (tempVal * 10) + digit;
        }
        let counter = counter + 1;
      }
      if (negativeNum) {
        return tempVal * -1;
      } else {
        return tempVal;
      }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var String tempStr;
      var boolean negNum;
      var int tempVal;
      var int counter;
      var int numLen;
      var int ptr;
      let counter = 0;
      let ptr = 0;
      if (val < 0) {
        let negNum = true;
      } else {
        let negNum = false;
      }
      let tempVal = Math.abs(val);
      let tempStr = String.int2String(tempVal);
      let numLen = tempStr.length();
      // reset length to 0
      let length = 0;
      if (negNum) {
        let str[ptr] = String.negativeSign();
        let ptr = 1;
        let length = length + 1;
      }
      while (counter < numLen) {
        let str[ptr] = tempStr.charAt(counter);
        let ptr = ptr + 1;
        let counter = counter + 1;
        let length = length + 1;
      }

      return;
    }

    function String int2String(int val) {
      var int lastDigit;
      var int modulo;
      var char c;
      var String result;
      let modulo = val / 10;
      let lastDigit = val - (modulo * 10);
      let c = String.ascVal(lastDigit);
      if (val < 10) {
        let result = String.new(6);
        do result.appendChar(c);
        return result;
      } else {
        let result = String.int2String(val / 10);
        do result.appendChar(c);
        return result;
      }

    }

    function char ascVal(int digit) {
      var int c;
      let c = 48 + digit;
      return c;
    }

    function int intVal(char c) {
      return c - 48;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }

    function char negativeSign() {
      return 45;
    }
}
